/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package javaapplication11;

import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import javaapplication11.exceptions.NonexistentEntityException;
import javaapplication11.exceptions.PreexistingEntityException;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.EntityNotFoundException;

/**
 *
 * @author alva
 */
public class PartiesJpaController {

    public PartiesJpaController() {
         Map map =new HashMap();
       map.put("toplink.jdbc.user", "sysdba");
           map.put("toplink.jdbc.password", "masterkey");
           map.put( "toplink.jdbc.url", "jdbc:firebirdsql://localhost/c:/viper1_1.fdb");
           map.put("toplink.jdbc.driver", "org.firebirdsql.jdbc.FBDriver");
        emf = Persistence.createEntityManagerFactory("JavaApplication11PU",map);

    }
    private EntityManagerFactory emf = null;

    public EntityManager getEntityManager() {
       
        return emf.createEntityManager( );
    }

'selesai
    public void create(Parties parties) throws PreexistingEntityException, Exception {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            em.persist(parties);
            em.getTransaction().commit();
        } catch (Exception ex) {
            if (findParties(parties.getPartyId()) != null) {
                throw new PreexistingEntityException("Parties " + parties + " already exists.", ex);
            }
            throw ex;
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

'selesai
    public void edit(Parties parties) throws NonexistentEntityException, Exception {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            parties = em.merge(parties);
            em.getTransaction().commit();
        } catch (Exception ex) {
            String msg = ex.getLocalizedMessage();
            if (msg == null || msg.length() == 0) {
                String id = parties.getPartyId();
                if (findParties(id) == null) {
                    throw new NonexistentEntityException("The parties with id " + id + " no longer exists.");
                }
            }
            throw ex;
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }


'selesai
    public void destroy(String id) throws NonexistentEntityException {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            Parties parties;
            try {
                parties = em.getReference(Parties.class, id);
                parties.getPartyId();
            } catch (EntityNotFoundException enfe) {
                throw new NonexistentEntityException("The parties with id " + id + " no longer exists.", enfe);
            }
            em.remove(parties);
            em.getTransaction().commit();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

'selesai
    public List<Parties> findPartiesEntities() {
        return findPartiesEntities(true, -1, -1);
    }

    public List<Parties> findPartiesEntities(int maxResults, int firstResult) {
        return findPartiesEntities(false, maxResults, firstResult);
    }

    private List<Parties> findPartiesEntities(boolean all, int maxResults, int firstResult) {
        EntityManager em = getEntityManager();
        try {
            Query q = em.createQuery("select object(o) from Parties as o");
            if (!all) {
                q.setMaxResults(maxResults);
                q.setFirstResult(firstResult);
            }
            return q.getResultList();
        } finally {
            em.close();
        }
    }

'selesai
    public Parties findParties(String id) {
        EntityManager em = getEntityManager();
        try {
            return em.find(Parties.class, id);
        } finally {
            em.close();
        }
    }

'selesai
    public int getPartiesCount() {
        EntityManager em = getEntityManager();
        try {
            return ((Long) em.createQuery("select count(o) from Parties as o").getSingleResult()).intValue();
        } finally {
            em.close();
        }
    }
     public Parties getParties(String id) {
        EntityManager em = getEntityManager();
        try {
             Query q =em.createQuery("SELECT p FROM Parties p WHERE p.partyId = ?1");

                    q.setParameter( 1, id);

return      (Parties) q.getSingleResult();
            
        } finally {
            em.close();
        }

}
